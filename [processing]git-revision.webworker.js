(self.webpackChunk_wixc3_stylable_playground_feature=self.webpackChunk_wixc3_stylable_playground_feature||[]).push([[488],{78435:e=>{var t="undefined"!=typeof Element,i="function"==typeof Map,s="function"==typeof Set,r="function"==typeof ArrayBuffer&&!!ArrayBuffer.isView;function a(e,n){if(e===n)return!0;if(e&&n&&"object"==typeof e&&"object"==typeof n){if(e.constructor!==n.constructor)return!1;var o,c,h,u;if(Array.isArray(e)){if((o=e.length)!=n.length)return!1;for(c=o;0!=c--;)if(!a(e[c],n[c]))return!1;return!0}if(i&&e instanceof Map&&n instanceof Map){if(e.size!==n.size)return!1;for(u=e.entries();!(c=u.next()).done;)if(!n.has(c.value[0]))return!1;for(u=e.entries();!(c=u.next()).done;)if(!a(c.value[1],n.get(c.value[0])))return!1;return!0}if(s&&e instanceof Set&&n instanceof Set){if(e.size!==n.size)return!1;for(u=e.entries();!(c=u.next()).done;)if(!n.has(c.value[0]))return!1;return!0}if(r&&ArrayBuffer.isView(e)&&ArrayBuffer.isView(n)){if((o=e.length)!=n.length)return!1;for(c=o;0!=c--;)if(e[c]!==n[c])return!1;return!0}if(e.constructor===RegExp)return e.source===n.source&&e.flags===n.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===n.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===n.toString();if((o=(h=Object.keys(e)).length)!==Object.keys(n).length)return!1;for(c=o;0!=c--;)if(!Object.prototype.hasOwnProperty.call(n,h[c]))return!1;if(t&&e instanceof Element)return!1;for(c=o;0!=c--;)if(("_owner"!==h[c]&&"__v"!==h[c]&&"__o"!==h[c]||!e.$$typeof)&&!a(e[h[c]],n[h[c]]))return!1;return!0}return e!=e&&n!=n}e.exports=function(e,t){try{return a(e,t)}catch(e){if((e.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw e}}},68941:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Context=void 0;const s=i(5163),r=i(93849),a=s.__importStar(i(2206));t.default=new r.Feature({id:"gitCommands",dependencies:[a.default.asEntity],api:{gitCommandsService:r.Service.withType().defineEntity(a.processingEnv).allowRemoteAccess((0,r.declareComEmitter)("subscribe","unsubscribe")),gitUtilsService:r.Service.withType().defineEntity(a.processingEnv).allowRemoteAccess()},context:{gitCommandsContext:a.processingEnv.withContext()}}),t.Context=a.processingEnv.useContext("live-server")},54718:function(e,t,i){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(68941);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return s(r).default}})},51172:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GitHttpsAuthError=t.parseGitStderrForErrorMessage=t.getGitErrorCode=t.GitErrorCode=void 0;const s=i(91570);var r;!function(e){e.HTTPSAuthenticationFailed="GIT_HTTPS_AUTH_FAILED",e.SSHPermissionDenied="GIT_SSH_PERMISSION_DENIED",e.NotAGitRepository="NOT_A_GIT_REPOSITORY",e.GitNotFound="GIT_NOT_FOUND"}(r=t.GitErrorCode||(t.GitErrorCode={}));const a=[{pattern:"authentication failed for 'https://",errorCode:r.HTTPSAuthenticationFailed},{pattern:"could not read username for 'https://",errorCode:r.HTTPSAuthenticationFailed},{pattern:"could not read from remote repository",errorCode:r.SSHPermissionDenied},{pattern:"not a git repository",errorCode:r.NotAGitRepository}];t.getGitErrorCode=function(e){const t=a.find((({pattern:t})=>t instanceof RegExp?t.test(e):(0,s.includesCaseInsensitive)(e,t)));return null==t?void 0:t.errorCode},t.parseGitStderrForErrorMessage=function(e){var t;return null===(t=e.match(/(fatal|error):[\s\S]+/))||void 0===t?void 0:t[0]};class n extends Error{constructor(){super(...arguments),this.code=r.HTTPSAuthenticationFailed,this.credentialsProvided=!1}}t.GitHttpsAuthError=n},18859:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),i(5163).__exportStar(i(51172),t)},35784:(e,t,i)=>{e.exports=i(54718)},2550:(e,t,i)=>{e.exports=i(18859)},20137:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(5163),r=i(93849),a=i(32510),n=s.__importDefault(i(35784)),o=s.__importStar(i(2206)),c=i(5689),h=(0,a.defineOneWayResource)().defineEntity(o.processingEnv),u=(0,a.defineOneWayResource)().defineEntity(o.processingEnv),d=(0,a.defineComputedResource)().defineEntity(o.processingEnv),l=(0,a.defineOneWayResource)().defineEntity(o.processingEnv),g=(0,a.defineOneWayResource)().defineEntity(o.processingEnv),p=(0,a.defineOneWayResource)().defineEntity(o.processingEnv),f=(0,a.defineComputedResource)().defineEntity(o.processingEnv);t.default=new r.Feature({id:"gitRevision",dependencies:[o.default.asEntity,n.default.asEntity],api:{gitService:r.Service.withType().defineEntity(o.processingEnv).allowRemoteAccess(),gitDetector:r.Service.withType().defineEntity(o.processingEnv).allowRemoteAccess(),gitFetcher:r.Service.withType().defineEntity(o.processingEnv).allowRemoteAccess(),gitFetcherOption:new r.Config({fetchInterval:6e5,enabled:!0}),gitSyncRepoService:r.Service.withType().defineEntity(o.processingEnv).allowRemoteAccess(),gitHeadResourceManager:h,gitHeadResourceManagerMain:h.defineConsumer(c.mainEnv),gitRepoStatusResourceManager:u,gitRepoStatusResourceManagerMain:u.defineConsumer(c.mainEnv),gitFileStatusResourceManager:d,gitFileStatusResourceManagerMain:d.defineConsumer(c.mainEnv),gitBranchListResourceManager:l,gitBranchListResourceManagerMain:l.defineConsumer(c.mainEnv),gitMergeStateResourceManager:g,gitMergeStateResourceManagerMain:g.defineConsumer(c.mainEnv),gitSyncRepoResourceManager:p,gitSyncRepoResourceManagerMain:p.defineConsumer(c.mainEnv),gitTrackingBranchResourceManager:f,gitTrackingBranchResourceManagerMain:f.defineConsumer(c.mainEnv),gitConflictsService:r.Service.withType().defineEntity(o.processingEnv).allowRemoteAccess(),gitEventEmitter:r.Service.withType().defineEntity(o.processingEnv),gitMonitoringService:r.Service.withType().defineEntity(o.processingEnv).allowRemoteAccess()}})},29934:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(5163),r=i(93849),a=i(2206),n=i(47272),o=i(16778),c=i(56098),h=i(85131),u=i(81199),d=i(51592),l=i(49136);s.__importDefault(i(20137)).default.setup(a.processingEnv,(({gitFileStatusResourceManager:e,gitHeadResourceManager:t,gitRepoStatusResourceManager:i,gitBranchListResourceManager:s,gitMergeStateResourceManager:a,gitSyncRepoResourceManager:g,gitTrackingBranchResourceManager:p,gitFetcherOption:{fetchInterval:f,enabled:R},onDispose:S},{gitCommands:{gitCommandsService:E},project:{fs:_,projectService:v,fsResourcesSyncer:y}})=>{const m=[];S((()=>Promise.all(m.map((e=>e())))));const w=()=>v.getProjectPath(),C=new c.GitEventEmitter;m.push((()=>C.clear()));const T=t.provide({handler:n.gitHeadResourceHandler}),F=i.provide({handler:n.gitRepoStatusResourceHandler}),G=e.provide({dependencies:[F],handler:new n.GitFileStatusResourceComputer(F)}),I=s.provide({handler:n.gitBranchListResourceHandler}),b=a.provide({handler:n.gitMergeStateResourceHandler}),M=g.provide({handler:n.gitSyncRepoResourceHandler,resourceConstructor:l.GitSyncRepoResource}),P=new n.GitFetcher(E,C,f);m.push((()=>P.dispose()));const O=new n.GitRepoStatusResourceSyncer(T,F,E,y,C,(e=>_.join(w(),e)));m.push((()=>O.dispose()));const A=new n.GitBranchListResourceSyncer(E,I,C);m.push((()=>A.dispose()));const H=new u.GitService(E,F,O,C,(e=>_.relative(w(),e))),D=p.provide({dependencies:[T],handler:new n.GitTrackingBranchResourceComputer(T,H)}),B=new d.GitSyncRepoService(E,H,P,M,C,D);m.push((()=>B.dispose()));const k=new o.GitConflictsService(E,F,b),U=new n.GitDetector(E,_.join);m.push((()=>U.dispose())),U.subscribeToGitDetected((({gitPath:e})=>{R&&P.init();const t=new n.GitHeadResourceSyncer(T,_,e);m.push((()=>t.dispose()));const i=new n.GitMergeStateResourceSyncer(b,_,e);m.push((()=>i.dispose())),t.init().catch(r.reportError),i.init().catch(r.reportError),O.init().catch(r.reportError),A.init().catch(r.reportError)}));const L=new h.GitMonitoringService(U,B);return{gitService:H,gitFetcher:P,gitHeadResourceManager:T,gitRepoStatusResourceManager:F,gitFileStatusResourceManager:G,gitBranchListResourceManager:I,gitMergeStateResourceManager:b,gitSyncRepoResourceManager:M,gitTrackingBranchResourceManager:D,gitDetector:U,gitSyncRepoService:B,gitConflictsService:k,gitEventEmitter:C,gitMonitoringService:L}}))},87309:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.REMOTE_ORIGIN_HEAD=t.REMOTE_BRANCH_PREFIX=t.LOCAL_BRANCH_PREFIX=void 0,t.LOCAL_BRANCH_PREFIX="refs/heads/",t.REMOTE_BRANCH_PREFIX="refs/remotes/",t.REMOTE_ORIGIN_HEAD="refs/remotes/origin/HEAD"},24520:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GitBranchListResourceSyncer=void 0;const s=i(53818),r=i(60814),a=i(93849),n=i(87309);t.GitBranchListResourceSyncer=class{constructor(e,t,i){this.git=e,this.gitEventEmitter=i,this.disposed=!1,this.onFetchEnd=()=>{this.updateBranchList().catch(a.reportError)},this.gitBranchListResource=t.get(s.GIT_BRANCH_LIST_RESOURCE_ID,this)}async init(){await this.updateBranchList(),this.gitEventEmitter.on("fetchEnd",this.onFetchEnd)}dispose(){this.disposed=!0,this.gitBranchListResource.release(this),this.gitEventEmitter.off("fetchEnd",this.onFetchEnd)}async updateBranchList(){const e=await this.getRawBranches();this.disposed||this.lastRawBranches===e||(this.gitBranchListResource.applyChange((0,r.fullChange)(this.rawBranchesToBranchList(e))),this.lastRawBranches=e)}async getRawBranches(){return(await this.git.raw(["for-each-ref","--format","%(refname)","refs/heads","refs/remotes"])).trim()}rawBranchesToBranchList(e){const t=[],i=[];return e&&e.split("\n").forEach((e=>{if(e.startsWith(n.LOCAL_BRANCH_PREFIX))t.push(e.substr(n.LOCAL_BRANCH_PREFIX.length));else{if(!e.startsWith(n.REMOTE_BRANCH_PREFIX))throw new Error("Unknown ref: "+e);e!==n.REMOTE_ORIGIN_HEAD&&i.push(e.substr(n.REMOTE_BRANCH_PREFIX.length))}})),{local:t,remote:i}}}},16778:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GitConflictsService=void 0;const s=i(53818);t.GitConflictsService=class{constructor(e,t,i){this.git=e,this.repoStatusResource=t.get(s.GIT_REPO_STATUS_RESOURCE_ID,this),this.mergeStateResource=i.get(s.GIT_MERGER_STATE_RESOURCE_ID,this)}async resolve(){var e;const t=this.mergeStateResource.getLatest();if(!t.isMergeState)throw new Error("resolve operation is available only while git is in merge state");const i=null===(e=this.repoStatusResource.getLatest())||void 0===e?void 0:e.conflicted;if(!(null==i?void 0:i.length))throw new Error("No conflicted files defined in repo status");i&&(await this.git.raw(["checkout","--theirs",...i]),await this.git.raw(["add",...i])),await this.git.commit(t.mergeMessage)}async abort(){if(!this.mergeStateResource.getLatest().isMergeState)throw new Error("resolve operation is available only while git is in merge state");await this.git.raw(["merge","--abort"])}}},43160:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GitDetector=void 0;const s=i(91570),r=i(93849);t.GitDetector=class{constructor(e,t,i=6e4){this.git=e,this.join=t,this.detectionInterval=i,this.subscribers=(0,s.setupSubscribers)(),this.disposed=!1}async init(){await this.detect()||this.disposed||(this.intervalId=setInterval((()=>{this.detect().then((e=>{e&&this.intervalId&&(clearInterval(this.intervalId),this.intervalId=void 0)})).catch(r.reportError)}),this.detectionInterval))}async dispose(){this.disposed=!0,void 0!==this.intervalId&&(clearInterval(this.intervalId),this.intervalId=void 0),this.pendingAction&&await this.pendingAction,this.subscribers.internals.listeners.clear()}subscribeToGitDetected(e){this.subscribers.subscribe(e)}unsubscribeFromGitDetected(e){this.subscribers.unsubscribe(e)}async detect(){this.pendingAction=this.getRepoRootPath();const e=await this.pendingAction;return this.pendingAction=void 0,!!e&&(this.subscribers.internals.notify({gitPath:e}),!0)}async getRepoRootPath(){try{const e=await this.git.raw(["rev-parse","--show-toplevel"]);return this.join(e.trim(),".git")}catch{return null}}}},56098:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GitEventEmitter=void 0;const s=i(93849);class r extends s.EventEmitter{}t.GitEventEmitter=r},32859:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GitFetcher=void 0;const s=i(91570),r=i(2550),a=i(99559);t.GitFetcher=class{constructor(e,t,i){this.git=e,this.gitEventEmitter=t,this.fetchInterval=i,this.isDisposed=!1,this.backgroundFetchBlockers=new Set,this.backgroundFetch=()=>{0===this.backgroundFetchBlockers.size&&this.fetch().catch(s.noop)},t.on("switchBranch",this.backgroundFetch)}init(){this.startAutoFetch()}startAutoFetch(){this.stopAutoFetch(),this.backgroundFetch(),this.autoFetchIntervalId=setInterval(this.backgroundFetch,this.fetchInterval)}stopAutoFetch(){this.autoFetchIntervalId&&(clearInterval(this.autoFetchIntervalId),this.autoFetchIntervalId=void 0)}async fetch(){if(this.currentFetch)return this.currentFetch;this.gitEventEmitter.emit("fetchStart",void 0),this.currentFetch=this.git.fetch().then(s.noop);try{if(await this.currentFetch,this.isDisposed)return;this.unblockBackgroundFetch(a.BackgroundFetchBlocker.NotAGitRepo),this.unblockBackgroundFetch(a.BackgroundFetchBlocker.SSHAuthError),this.unblockBackgroundFetch(a.BackgroundFetchBlocker.HTTPSAuthError),this.gitEventEmitter.emit("fetchEnd",void 0)}catch(e){if(this.isDisposed)return;const t=e instanceof Error?(0,r.getGitErrorCode)(e.message):void 0;throw t===r.GitErrorCode.NotAGitRepository?this.blockBackgroundFetch(a.BackgroundFetchBlocker.NotAGitRepo):t===r.GitErrorCode.SSHPermissionDenied?this.blockBackgroundFetch(a.BackgroundFetchBlocker.SSHAuthError):t===r.GitErrorCode.HTTPSAuthenticationFailed&&this.blockBackgroundFetch(a.BackgroundFetchBlocker.HTTPSAuthError),this.gitEventEmitter.emit("fetchFailed",void 0),e}finally{this.currentFetch=void 0}}blockBackgroundFetch(e){this.backgroundFetchBlockers.add(e)}unblockBackgroundFetch(e){this.backgroundFetchBlockers.delete(e)}unblockBackgroundFetchFromHTTPSAuthError(){this.unblockBackgroundFetch(a.BackgroundFetchBlocker.HTTPSAuthError)}dispose(){this.stopAutoFetch(),this.isDisposed=!0}}},80504:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GitHeadResourceSyncer=void 0;const s=i(53818),r=i(60814),a=i(93849),n="ref: ";t.GitHeadResourceSyncer=class{constructor(e,t,i){this.fs=t,this.gitFolderPath=i,this.onRefChange=({path:e})=>{const t=e===this.headPath,i=e===this.currentRefPath;if(t)this.currentRefPath&&this.fs.watchService.unwatchPath(this.currentRefPath,this.onRefChange).catch(a.reportError),this.updateHeadResource();else{if(!i)throw new Error("Unexpected file change in GitHeadResourceSyncer: "+e);{const e=this.fs.readFileSync(this.currentRefPath,"utf8").trim();this.gitHeadResource.applyChange((0,r.fullChange)({...this.gitHeadResource.getLatest(),commit:e}))}}},this.gitHeadResource=e.get(s.GIT_HEAD_RESOURCE_ID,this),this.headPath=this.fs.join(i,"HEAD")}async init(){this.fs.fileExistsSync(this.headPath)?(await this.fs.watchService.watchPath(this.headPath,this.onRefChange),this.updateHeadResource()):this.gitHeadResource.invalidate("No .git/HEAD file")}async dispose(){this.gitHeadResource.release(this),this.fs.fileExistsSync(this.headPath)&&await this.fs.watchService.unwatchPath(this.headPath,this.onRefChange),this.currentRefPath&&await this.fs.watchService.unwatchPath(this.currentRefPath,this.onRefChange)}updateHeadResource(){const e=this.fs.readFileSync(this.headPath,"utf8").trim();e||this.gitHeadResource.invalidate(".git/HEAD file is empty");const{refFile:t,branchName:i,commit:s}=this.parseHeadFile(e);if(t){const e=this.fs.join(this.gitFolderPath,t);if(this.fs.fileExistsSync(e)){this.currentRefPath=e;const t=this.fs.readFileSync(e,"utf8").trim();this.fs.watchService.watchPath(e,this.onRefChange).catch(a.reportError),this.gitHeadResource.applyChange((0,r.fullChange)({branch:i,commit:t}))}else this.gitHeadResource.applyChange((0,r.fullChange)({branch:i}))}else this.gitHeadResource.applyChange((0,r.fullChange)({commit:s}))}parseHeadFile(e){return e.startsWith(n)?{refFile:e.substr(n.length),branchName:e.substr("ref: refs/heads/".length)}:{commit:e}}}},79140:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GitMergeStateResourceSyncer=void 0;const s=i(53818),r=i(60814);t.GitMergeStateResourceSyncer=class{constructor(e,t,i){this.fs=t,this.gitFolderPath=i,this.fsListener=e=>{e.path===this.mergeMessagePath&&this.onMergeFileChange(e)},this.mergeStateResource=e.get(s.GIT_MERGER_STATE_RESOURCE_ID,this),this.mergeMessagePath=this.fs.join(i,"MERGE_MSG")}async init(){this.fs.directoryExistsSync(this.gitFolderPath)?(await this.fs.watchService.watchPath(this.gitFolderPath),this.fs.watchService.addGlobalListener(this.fsListener),this.fs.fileExistsSync(this.mergeMessagePath)&&this.enterMergeState()):this.mergeStateResource.invalidate("No .git folder")}async dispose(){this.mergeStateResource.release(this),this.fs.directoryExistsSync(this.gitFolderPath)&&(await this.fs.watchService.unwatchPath(this.gitFolderPath),this.fs.watchService.removeGlobalListener(this.fsListener))}onMergeFileChange(e){null!==e.stats?this.enterMergeState():this.exitMergeState()}enterMergeState(){const e=this.fs.readFileSync(this.mergeMessagePath,"utf8");this.mergeStateResource.applyChange((0,r.fullChange)({isMergeState:!0,mergeMessage:e}))}exitMergeState(){this.mergeStateResource.applyChange((0,r.fullChange)({isMergeState:!1}))}}},85131:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GitMonitoringService=void 0,t.GitMonitoringService=class{constructor(e,t){this.gitDetector=e,this.gitSyncRepo=t,this.started=!1}async start(){this.started||(this.started=!0,this.gitSyncRepo.init(),await this.gitDetector.init())}}},28958:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GitRepoStatusResourceSyncer=void 0;const s=i(5163),r=i(60814),a=i(53818),n=i(1706),o=i(93849),c=i(91570),h=s.__importDefault(i(78435));t.GitRepoStatusResourceSyncer=class{constructor(e,t,i,s,n,u){this.git=i,this.fsSyncer=s,this.gitEventEmitter=n,this.relativeToAbsolute=u,this.updateStatus=async e=>{this.currentDisposableUpdateStatus&&this.currentDisposableUpdateStatus.dispose(),this.currentDisposableUpdateStatus=this.disposableUpdateStatus(),await this.currentDisposableUpdateStatus.updateStatus(e),this.currentDisposableUpdateStatus=void 0},this.handleGitHeadChange=()=>this.updateStatus(),this.handleFsChange=()=>this.debouncedUpdateStatus(),this.disposableUpdateStatus=()=>{let e=!1;return{updateStatus:async t=>{try{this.currentGitStatus=this.git.status();const i=await this.currentGitStatus;if(this.currentGitStatus=void 0,e&&!(null==t?void 0:t.force))return;const s=this.getResourceValue(i),a=this.gitRepoStatusResource.getLatest();!(null==t?void 0:t.force)&&(0,h.default)(s,a)||this.gitRepoStatusResource.applyChange((0,r.fullChange)(s))}catch(e){e.message.includes("fatal: not a git repository")?(this.currentGitStatus=void 0,await this.dispose(),this.gitRepoStatusResource.invalidate("Not a git repo")):(0,o.reportError)(e)}},dispose:()=>e=!0}},this.updateStatusDebouncer=new c.Debouncer(this.updateStatus,300,500),this.debouncedUpdateStatus=this.updateStatusDebouncer.trigger.bind(this.updateStatusDebouncer),this.onFetchEnd=async()=>{await this.updateStatus()},this.gitHeadResource=e.get(a.GIT_HEAD_RESOURCE_ID,this),this.gitRepoStatusResource=t.get(a.GIT_REPO_STATUS_RESOURCE_ID,this)}async init(){await this.updateStatus(),this.fsSyncer.subscribeToFs(this.handleFsChange),this.gitEventEmitter.on("fetchEnd",this.onFetchEnd),this.gitHeadResource.subscribe(this.handleGitHeadChange)}async dispose(){this.updateStatusDebouncer.cancel(),this.gitHeadResource.unsubscribe(this.handleGitHeadChange),this.gitHeadResource.release(this),this.gitRepoStatusResource.release(this),this.fsSyncer.unsubscribeFromFs(this.handleFsChange),this.gitEventEmitter.off("fetchEnd",this.onFetchEnd),this.currentGitStatus&&await this.currentGitStatus}getResourceValue(e){const t=(0,n.statusResultToFilesMap)(e,this.relativeToAbsolute);return{ahead:e.ahead,behind:e.behind,conflicted:e.conflicted.map(this.relativeToAbsolute),staged:e.staged.map(this.relativeToAbsolute),filesMap:t}}}},81199:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GitService=void 0;const s=i(5163),r=i(73654),a=i(53818),n=s.__importDefault(i(82717));t.GitService=class{constructor(e,t,i,s,r){this.git=e,this.gitRepoStatusSyncer=i,this.gitEventEmitter=s,this.absoluteToRelative=r,this.gitRepoStatusResource=t.get(a.GIT_REPO_STATUS_RESOURCE_ID,this)}async getRemoteOriginUrl(){try{return(await this.git.raw(["config","--get","remote.origin.url"])).trim()}catch{return}}async getParsedRemoteOriginUrl(){const e=await this.getRemoteOriginUrl();return e?(0,n.default)(e):void 0}async getLogEntries(e){return(await this.git.raw(["log",`--format=${e}`])).trim()}undoLastCommit(){return this.git.raw(["reset","HEAD~"])}async undoChanges(e){const t=await this.forceStatusUpdate(),i=new Set(t.staged),s=e.filter((e=>i.has(e)));await this.git.raw(["reset","HEAD","-q",...s.map(this.absoluteToRelative)]);const r=e.map(this.absoluteToRelative),n=new Set(this.filterFilesByStatus(t.filesMap,(({modificationStatus:e})=>e===a.GitFileModificationStatus.Added))),o=[],c=[];for(const e of r)n.has(e)?o.push(e):c.push(e);o.length&&await this.cleanUntrackedPaths(o),c.length&&await this.git.raw(["checkout","-q",...c])}async revertAll(){await this.resetHard();const{filesMap:e}=await this.forceStatusUpdate();await this.cleanUntrackedPaths(this.getUntrackedGitPaths(e))}async commitFiles(e,t){const i=t.map(this.absoluteToRelative),{filesMap:s}=await this.forceStatusUpdate(),r=new Set(this.getUntrackedGitPaths(s)),a=i.filter((e=>r.has(e)));a.length&&await this.git.raw(["add","-A",...a]);try{return await this.git.commit(e,i)}catch(e){throw await this.git.raw(["reset","-q","HEAD",...a]),e}}async mergeFrom(e){return this.git.raw(["merge",e])}async commitAll(e){const{filesMap:t}=await this.forceStatusUpdate(),i=this.getUntrackedGitPaths(t);try{return await this.git.raw(["add","-A","."]),await this.git.commit(e)}catch(e){throw await this.git.raw(["reset","-q","HEAD",...i]),e}}async history({limit:e=50,skip:t}={}){const i={"--max-count":e.toString()};return t&&(i["--skip"]=t.toString()),this.git.log(i)}async createNewBranch(e){await this.git.raw(["checkout","-b",e]),this.gitEventEmitter.emit("createBranch",{branchName:e})}async switchBranch(e,t){const i=["-q"];if(t){const t=await this.getTrackingLocalBranch(e);t?(await this.git.checkout(t,i),e=t):(i.push("--track"),await this.git.checkout(e,i),e=(await this.git.status()).current,this.gitEventEmitter.emit("createBranch",{branchName:e}))}else await this.git.checkout(e,i);return this.gitEventEmitter.emit("switchBranch",{branchName:e}),e}async pushCurrentBranch(){const e=(await this.git.raw(["rev-parse","--abbrev-ref","HEAD"])).trim();await this.git.raw(["push","-u","origin",e])}async getTrackingBranch(e){return(await this.git.raw(["for-each-ref","--format","%(upstream:short)",`refs/heads/${e}`])).trim()||void 0}async forceStatusUpdate(){if(!this.gitRepoStatusResource.isValid())throw new Error(this.gitRepoStatusResource.getInvalidationMessage());await Promise.all([new Promise((e=>this.gitRepoStatusResource.subscribeOnce(e))),this.gitRepoStatusSyncer.updateStatus({force:!0})]);const e=this.gitRepoStatusResource.getLatest();if(null===e)throw new Error("GitRepoStatusResource is null after being updated, check GitRepoStatusResourceSyncer");return e}async cleanUntrackedPaths(e){const t=e.reduce(((e,t)=>{const i=r.win32.dirname(t);return e[i]||(e[i]=new Set),e[i].add(t),e}),{});await Promise.all(Object.values(t).map((e=>this.git.raw(["clean","-f","-q",...e]))))}async getTrackingLocalBranch(e){const t=(await this.git.raw(["for-each-ref","--format","%(refname:short)::%(upstream:short)","refs/heads"])).trim().split("\n");for(const i of t){const[t,s]=i.split("::");if(s===e)return t}}async resetHard(){await this.git.raw(["reset","HEAD","--hard","-q"])}getUntrackedGitPaths(e){return this.filterFilesByStatus(e,(e=>!e.tracked))}filterFilesByStatus(e,t){return Object.entries(e).filter((([,e])=>t(e))).map((([e])=>e)).map(this.absoluteToRelative)}}},51592:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GitSyncRepoService=void 0;const s=i(53818);t.GitSyncRepoService=class{constructor(e,t,i,r,a,n){this.git=e,this.gitService=t,this.gitFetcher=i,this.gitEventEmitter=a,this.trackingBranchManager=n,this.handleFetchStart=()=>{this.syncRepoResource.startFetching()},this.handleFetchEnd=()=>{this.syncRepoResource.doneFetching()},this.handleFetchFailed=()=>{this.syncRepoResource.fetchingFailed()},this.syncRepoResource=r.get(s.GIT_SYNC_REPO_RESOURCE_ID,this)}init(){this.gitEventEmitter.on("fetchStart",this.handleFetchStart),this.gitEventEmitter.on("fetchEnd",this.handleFetchEnd),this.gitEventEmitter.on("fetchFailed",this.handleFetchFailed)}dispose(){this.gitEventEmitter.off("fetchStart",this.handleFetchStart),this.gitEventEmitter.off("fetchEnd",this.handleFetchEnd),this.gitEventEmitter.off("fetchFailed",this.handleFetchFailed),this.syncRepoResource.release(this)}async syncRepo(){const{ahead:e,behind:t,filesMap:i}=await this.gitService.forceStatusUpdate();if(Object.keys(i).length)throw new Error("Cannot sync repo while having uncommitted changes");if(t){const{status:e}=await this.pull();if("conflict"===e)return e}e&&await this.push()}async pull(){this.syncRepoResource.startPulling();try{await this.git.pull(),this.gitEventEmitter.emit("pull",void 0);const{conflicted:e}=await this.gitService.forceStatusUpdate();if(e.length)return{status:"conflict"}}catch{throw new Error(s.PULL_FAILED)}finally{this.syncRepoResource.donePulling()}return{status:"done"}}async push(){this.syncRepoResource.startPushing();try{await this.git.push()}catch{throw new Error(s.PUSH_FAILED)}finally{this.syncRepoResource.donePushing(),await this.gitService.forceStatusUpdate()}}fetch(){return this.gitFetcher.fetch()}async pushCurrentBranch(){this.syncRepoResource.startPushing();try{await this.gitService.pushCurrentBranch()}finally{this.syncRepoResource.donePushing()}this.trackingBranchManager.reEvaluateValue(s.GIT_TRACKING_BRANCH_RESOURCE_ID)}}},47272:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(5163);s.__exportStar(i(24520),t),s.__exportStar(i(16778),t),s.__exportStar(i(43160),t),s.__exportStar(i(56098),t),s.__exportStar(i(32859),t),s.__exportStar(i(80504),t),s.__exportStar(i(79140),t),s.__exportStar(i(28958),t),s.__exportStar(i(81199),t),s.__exportStar(i(51592),t),s.__exportStar(i(43534),t),s.__exportStar(i(48433),t),s.__exportStar(i(10007),t),s.__exportStar(i(17965),t),s.__exportStar(i(8706),t),s.__exportStar(i(95116),t),s.__exportStar(i(91637),t),s.__exportStar(i(90427),t),s.__exportStar(i(1706),t)},43534:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.gitBranchListResourceHandler=void 0;const s=i(53818);t.gitBranchListResourceHandler={provide:e=>{if(e!==s.GIT_BRANCH_LIST_RESOURCE_ID)throw new Error("This is a single resource, use only `GIT_BRANCH_LIST_RESOURCE_ID` as an id");return{value:null}}}},48433:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GitFileStatusResourceComputer=void 0;const s=i(60814),r=i(53818);t.GitFileStatusResourceComputer=class{constructor(e){this.gitRepoStatusManager=e}compute(e){const t=this.gitRepoStatusManager.get(r.GIT_REPO_STATUS_RESOURCE_ID),i=t.getLatest(),a=(null==i?void 0:i.filesMap[e])?i.filesMap[e]:null,n=new Set([t]);return{value:a,dependencies:n,status:(0,s.getDefaultStatusHandling)(e,n)}}recompute(e){const{value:t,dependencies:i,status:r}=this.compute(e.getId());return{changes:JSON.stringify(e.getLatest())!==JSON.stringify(t)?[(0,s.fullChange)(t)]:[],dependencies:i,status:r}}}},10007:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.gitHeadResourceHandler=void 0;const s=i(53818);t.gitHeadResourceHandler={provide:e=>{if(e!==s.GIT_HEAD_RESOURCE_ID)throw new Error("This is a single resource, use only `GIT_HEAD_RESOURCE_ID` as an id");return{value:{}}}}},17965:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.gitMergeStateResourceHandler=void 0;const s=i(53818);t.gitMergeStateResourceHandler={provide:e=>{if(e!==s.GIT_MERGER_STATE_RESOURCE_ID)throw new Error("This is a single resource, use only `GIT_MERGER_STATE_RESOURCE_ID` as an id");return{value:{isMergeState:!1}}}}},8706:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.gitRepoStatusResourceHandler=void 0;const s=i(53818);t.gitRepoStatusResourceHandler={provide:e=>{if(e!==s.GIT_REPO_STATUS_RESOURCE_ID)throw new Error("This is a single resource, use only `GIT_REPO_STATUS_RESOURCE_ID` as an id");return{value:null}}}},95116:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.gitSyncRepoResourceHandler=void 0;const s=i(53818),r=i(49136);t.gitSyncRepoResourceHandler={provide:e=>{if(e!==s.GIT_SYNC_REPO_RESOURCE_ID)throw new Error("This is a single resource, use only `GIT_SYNC_REPO_RESOURCE_ID` as an id");return{value:r.gitSyncRepoDefaultValue}}}},91637:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GitTrackingBranchResourceComputer=void 0;const s=i(60814),r=i(53818);t.GitTrackingBranchResourceComputer=class{constructor(e,t){this.gitHeadManager=e,this.gitService=t}async compute(e,t){if(e!==r.GIT_TRACKING_BRANCH_RESOURCE_ID)throw new Error("This is a single resource, use only `GIT_TRACKING_BRANCH_RESOURCE_ID` as an id");const i=this.gitHeadManager.get(r.GIT_HEAD_RESOURCE_ID,t),a=new Set([i]),{branch:n}=i.getLatest();return n?{value:{trackingBranch:await this.gitService.getTrackingBranch(n)},dependencies:a,status:(0,s.getDefaultStatusHandling)(e,a)}:{value:{},dependencies:a,status:(0,s.getDefaultStatusHandling)(e,a)}}async recompute(e){const{value:t,dependencies:i,status:r}=await this.compute(e.getId(),e);return{changes:e.getLatest()!==t?[(0,s.fullChange)(t)]:[],dependencies:i,status:r}}}},90427:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},1706:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.statusResultToFilesMap=void 0;const s=i(53818);t.statusResultToFilesMap=function(e,t){const i={};return e.created.map(t).forEach((e=>{i[e]={modificationStatus:s.GitFileModificationStatus.Added,tracked:!0}})),e.not_added.map(t).forEach((e=>{i[e]={modificationStatus:s.GitFileModificationStatus.Added,tracked:!1}})),e.deleted.map(t).forEach((e=>{i[e]={modificationStatus:s.GitFileModificationStatus.Deleted,tracked:!0}})),e.modified.map(t).forEach((e=>{i[e]={modificationStatus:s.GitFileModificationStatus.Modified,tracked:!0}})),e.renamed.forEach((({from:e,to:r})=>{i[t(r)]={modificationStatus:s.GitFileModificationStatus.Renamed,from:t(e),tracked:!0}})),e.conflicted.map(t).forEach((e=>{i[e]={modificationStatus:s.GitFileModificationStatus.Conflicted,tracked:!0}})),i}},53818:(e,t)=>{"use strict";var i,s;Object.defineProperty(t,"__esModule",{value:!0}),t.PULL_FAILED=t.PUSH_FAILED=t.GIT_TRACKING_BRANCH_RESOURCE_ID=t.GIT_SYNC_REPO_RESOURCE_ID=t.GIT_MERGER_STATE_RESOURCE_ID=t.GIT_BRANCH_LIST_RESOURCE_ID=t.GIT_REPO_STATUS_RESOURCE_ID=t.GIT_HEAD_RESOURCE_ID=t.BackgroundFetchBlocker=t.GitFileModificationStatus=void 0,(s=t.GitFileModificationStatus||(t.GitFileModificationStatus={})).Modified="Modified",s.Renamed="Renamed",s.Deleted="Deleted",s.Added="Added",s.Conflicted="Conflicted",(i=t.BackgroundFetchBlocker||(t.BackgroundFetchBlocker={})).HTTPSAuthError="HTTPS_AUTH_ERROR",i.SSHAuthError="SSH_AUTH_ERROR",i.NotAGitRepo="NOT_A_GIT_REPO",t.GIT_HEAD_RESOURCE_ID="GIT_HEAD_RESOURCE_ID",t.GIT_REPO_STATUS_RESOURCE_ID="GIT_REPO_STATUS_RESOURCE_ID",t.GIT_BRANCH_LIST_RESOURCE_ID="GIT_BRANCH_LIST_RESOURCE_ID",t.GIT_MERGER_STATE_RESOURCE_ID="GIT_MERGER_STATE_RESOURCE_ID",t.GIT_SYNC_REPO_RESOURCE_ID="GIT_SYNC_REPO_RESOURCE_ID",t.GIT_TRACKING_BRANCH_RESOURCE_ID="GIT_TRACKING_BRANCH_RESOURCE_ID",t.PUSH_FAILED="PUSH_FAILED",t.PULL_FAILED="PULL_FAILED"},49136:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GitSyncRepoResource=t.gitSyncRepoDefaultValue=void 0;const s=i(60814);t.gitSyncRepoDefaultValue={isFetching:!1,isPulling:!1,isPushing:!1,fetchFailed:!1};class r extends s.Resource{startFetching(){this.applyChange((0,s.fullChange)({...this.getLatest(),isFetching:!0,fetchFailed:!1}))}doneFetching(){this.applyChange((0,s.fullChange)({...this.getLatest(),isFetching:!1,lastFetch:(new Date).getTime(),fetchFailed:!1}))}fetchingFailed(){this.applyChange((0,s.fullChange)({...this.getLatest(),isFetching:!1,fetchFailed:!0}))}startPulling(){this.applyChange((0,s.fullChange)({...this.getLatest(),isPulling:!0}))}donePulling(){this.applyChange((0,s.fullChange)({...this.getLatest(),lastFetch:(new Date).getTime(),isPulling:!1}))}startPushing(){this.applyChange((0,s.fullChange)({...this.getLatest(),isPushing:!0}))}donePushing(){this.applyChange((0,s.fullChange)({...this.getLatest(),lastFetch:(new Date).getTime(),isPushing:!1}))}}t.GitSyncRepoResource=r},99559:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(5163);s.__exportStar(i(53818),t),s.__exportStar(i(49136),t)},43934:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;const s=i(5163);s.__exportStar(i(31434),t);var r=i(31434);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return s.__importDefault(r).default}})},2206:(e,t,i)=>{e.exports=i(43934)},60814:(e,t,i)=>{e.exports=i(73858)}}]);